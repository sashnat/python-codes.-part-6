class Information:
     def __init__(self,info):
          self.info = info # атрибут self.info принимает значение info
     def extract(self,i):
          self.current = self.info[i] 
          return "%s" % self.current  
          
      # Объекты данного класса при создании должны содержать ту или иную информацию
      #(содержание урока), допустим в виде списка. В классе также предусмотрен метод extract,
      # позволяющий извлекать какую-то часть информации и возвращать ее в основную программу.


class Selfstudy:
     def get(self,web):
          self.web = web            
     def fromweb(self):             
          return "%s" % self.web    
         

class Teacher:
     def into(self,phrase):       
          self.phrase = phrase      
     def out(self):                 
          return "%s" % self.phrase 
      # Объектам типа «Учитель» в нашей программе позволено
      # лишь вспоминать фразу и громко транслировать.

class Pupil:
     def __init__(self):
          self.know = []
     def take(self, i):
          self.know.append(i)
          for j in range(len(self.know)):
               if j >= 1:
                    print('It is the time to self-study')
                    
class Others(Pupil):
     def out(self):
         print("new pupils")
                    
      # Объекты класса Pupil уже при своем создании обязаны иметь атрибут know,
      # куда будут помещаться знания.
      # Также предусмотрен метод take, обеспечивающий приемку информации.
inform = Information(["> (больше)","< (меньше)","== (равно)", "!= (не равно)"])
t = Teacher()               
p1 = Pupil()
p2 = Pupil()
p3 = Pupil()
s = Selfstudy()            
o = Others()


t.into(inform.extract(0))    
p1.take(t.out())             
o.take(t.out()) 
print ("1-ый ученик пока еще знает только ", p1.know)
print ("новые ученики пока еще знают только ", o.know)
o.out()


s.get(inform.extract(2))     
p2.take(s.fromweb())         
print ("2-ой ученик пока еще знает только ", p2.know)

s.get(inform.extract(1))     
t.into(inform.extract(0))
p1.take(t.out())
p2.take(t.out())
p3.take(s.fromweb())       

print ("1-ый ученик знает, что ", p1.know) # накапливание знаний: 1-от учителя, 2-от учителя
print ("2-ой ученик знает, что ", p2.know) # накапливание знаний: 1-из web, 2-от учителя
print ("3-ий ученик знает, что ", p3.know) # накапливание знаний: 1-из web

# Учитель берет с помощью метода extract объекта inform часть информации.
# Ученики, используя свой метод take имеют возможность получить информацию,
# воспроизводимую учителем (метод out объекта t).
